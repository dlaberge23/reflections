What happens when you initialize a repository? Why do you need to do it?
      Running git init will initialize a repository in the current directory.
       This creates a hidden folder (.git) in the directory. It does not create
       a commit, as it still doesn't know which files to commit. Without creating
       the repository, there is nowhere to save the meta data that allows us to
       look through previous commits.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
      Files are added to the staging area from the working directory (git add).
       However, they aren't committed yet(repository), but they are recognized
       by git in .git folder.
      This allows us to logically connect specific files into one commit, or keep
       them all in separate commits. We can group files or keep them separate,
       which will allow us to find changes that may have affected multiple files
       (ie. program files) or scan an unrelated file (ie. text document).

How can you use the staging area to make sure you have one commit per logical
change?
      You can can compare your staging area to the previous commit with the command
       git diff --staged. git diff will compare the working area to the staging
       directory, not to the previous commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
